/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse'
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.node-gradle.node" version "3.5.1"
}

node {
  // version = '17.6.0'
  // npmVersion = '8.5.1'
  download = true
}

// tasks.register("npm-install") {
//   group = "application"
//   description = "Installs dependencies from package.json"
//   tasks.appNpmInstall.exec();
// }

task appNpmInstall(type: NpmTask) {
  description = "Installs dependencies from package.json"
  workingDir = file("${projectDir}/src/main/resources/webapp");
  args = ["install"]
}

group = 'bitcamp'
version = '0.0.1-SNAPSHOT'

// CLI 환경에서 'build' 작업을 수행할 때 사용하는 설정
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' 
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

eclipse {
    project {
        name = "good-here-server"
    }
    jdt {  
      sourceCompatibility = 17
      targetCompatibility = 17
      javaRuntimeName = "JavaSE-17"
    }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  implementation ('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  implementation 'org.springframework.boot:spring-boot-starter-undertow'
  implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.0'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
  implementation 'com.google.api-client:google-api-client:1.32.1'
  implementation 'com.google.api-client:google-api-client-gson:1.32.1'
  testImplementation 'junit:junit:4.13.2'
    
  //implementation 'commons-io:commons-io:2.11.0'
  // implementation 'org.apache.tika:tika-core:1.27'
}

tasks.named('test') {
  useJUnitPlatform()
}

application {
     // Define the main class for the application.
     mainClass = 'bitcamp.goodhere.App'
 }

 // React build 설정
def webappDir = "$projectDir/src/main/resources/webapp"

sourceSets {
  main {
    resources {
      srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
    }
  }
}

processResources {
  dependsOn "copyWebApp"
}


task copyWebApp(type: Copy) {
    dependsOn "buildReact"
    from "$webappDir/build"
    into "$projectDir/src/main/resources/static"
}


task buildReact(type: Exec) {
  dependsOn "installReact"
  workingDir "$webappDir"
  inputs.dir "$webappDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine "npm.cmd", "run-script", "build"
  } else {
    commandLine "npm", "run-script", "build"
  }
}

task installReact(type: Exec) {
  workingDir "$webappDir"
  inputs.dir "$webappDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine "npm.cmd", "audit", "fix"
    commandLine 'npm.cmd', 'install'
  } else {
    commandLine "npm", "audit", "fix"
    commandLine 'npm', 'install'
  }
}
